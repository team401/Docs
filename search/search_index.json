{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"401 Docs Overview","text":"<p>401 Docs was started in the summer of 2019 and is an ongoing effort to improve Team 401 by documenting our procedures and experiences.</p> <ul> <li> <p> Electrical</p> <p>Explains electrical components and schematic software we use.</p> <p> Electrical</p> </li> <li> <p> Programming</p> <p>Guides on getting started with programming on Team 401.</p> <p> Getting Started</p> </li> <li> <p> Design</p> <p>Tutorials and training for getting started with the Team 401 Design team.</p> <p> Design</p> </li> <li> <p> Fabrication</p> <p>Documentation and procedures for machine tools used by Team 401.</p> <p> Fabrication</p> </li> </ul>"},{"location":"contributing/","title":"Contributing to 401 Docs","text":""},{"location":"contributing/#testing-and-running-locally","title":"Testing and Running Locally","text":"<p>This site uses Material for MkDocs, visit their docs to see what customization options are available.</p> <ol> <li> <p>Clone this repo by running: <code>git clone https://github.com/team401/Docs</code></p> </li> <li> <p>Optionally, to avoid installing the Python packages into your user account, create a virtual environment first:</p> </li> </ol> <pre><code>python -m venv venv\n</code></pre> <p>You must activate the environment every time you wish to use it:</p> <pre><code>source venv/bin/activate   # on Unix/Linux/macOS\n</code></pre> <pre><code>venv\\Scripts\\activate      # on Windows, command prompt\nvenv\\Scripts\\Activate.ps1  # on Windows, PowerShell\n</code></pre> <p>where <code>venv</code> is a name and directory location you can choose. If you don't set up and activate a virtual environment first, <code>pip</code> will install <code>MkDocs</code> into your personal account.</p> <p>3 Then install Material for MkDocs and its dependencies: <code>pip install -r requirements.txt</code></p> <p>4 Serve the site locally: <code>mkdocs serve</code></p>"},{"location":"contributing/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    programming/\n        index.md # Programming section homepage\n        ... # Other programming files\n    ... # Other markdown pages, images and other files.\n</code></pre>"},{"location":"contributing/#recommended-vscode-extensions","title":"Recommended VSCode Extensions","text":"<ul> <li>markdownlint automatically checks for style errors in markdown files.</li> </ul>"},{"location":"design/","title":"Design","text":""},{"location":"electrical/fritzing/","title":"Fritzing","text":"<p>Team 401 uses Fritzing to create robot wiring diagrams in order to clearly show the components and connections in our controls system.</p>"},{"location":"electrical/fritzing/#getting-started","title":"Getting Started","text":""},{"location":"electrical/fritzing/#getting-fritzing","title":"Getting Fritzing","text":"<p>Fritzing install files for Windows, Mac, and Linux are available in the team leadership drive. Ask a subteam lead or MCPS coach if you need help getting access to them.</p>"},{"location":"electrical/fritzing/#downloading-parts","title":"Downloading Parts","text":"<p>Team 401 has developed some of their own parts of the past few years, which can be found and downloaded from the team's GitHub. You can also find some of the more common FRC parts at this other FRC mentor's GitHub repo. Simply save the parts to whatever directory you would like, but keep in that if they are moved Fritzing will not be able to find and load them.</p>"},{"location":"electrical/fritzing/#sketch-setup","title":"Sketch Setup","text":"<p>Click the \"New Sketch Button\" to create a new sketch. You can also click \"File\", then \"New Sketch\" from the dropdown menu or press \"Ctrl + N\" on your keyboard.</p> <p></p> <p>The new sketch will open into the \"Breadboard\" tab, where you will be doing most of your work for schematics. The \"Schematics\" tab will show the underlying circuitry of whatever component you're working with and will not be used in our case.</p> <p></p>"},{"location":"electrical/fritzing/#fritzing-electrical-basics","title":"Fritzing Electrical Basics","text":""},{"location":"electrical/fritzing/#loading-parts-into-fritzing","title":"Loading Parts into Fritzing","text":"<p>In order to place a part from either the 401 Parts or from another source, simply download the Fritzing Parts Files, either a .fzp or a .fzpz filetype, to the directory fo your choice. Then, either open the part using fritzing from your file exlporer to load it into your bin.</p> <p></p> <p>Alternatively, open it in the editor by either pressing \"Ctrl + O\" on your keyboard, or clicking \"File\" in the top left corner and then clicking \"Open\" inn the dropdown menu. Then select the part you would like to import.</p> <p></p> <p>After loading a part into Fritzing, you can find it in the \"My Parts\" bin, which is marked as \"MINE\" on the scrollbar for the \"Parts\" menu. If you want to create a new bin, simply left click on the \"Parts\" menu.</p>"},{"location":"electrical/fritzing/#placing-moving-and-deleting-parts","title":"Placing, Moving, and Deleting Parts","text":"<p>To place a part into the Bread Board Section, simply drag it from the \"Parts\" section on the right side of the screen once it has been loaded into Fritzing.  </p> <p></p> <p>To move parts around simply left click on them with your mouse and drag them to your desired location. You can also select a part with the mouse and change it's x and y coordinate in the \"Inspector\" menu, which can be found in the lower half of the right side of the screen.</p> <p></p> <p>To delete parts, simply left click on the part and press the \"Delete\" key on your keyboard. Alternatively, you can right click on the part and select \"Delete\" in the dropdown menu.</p>"},{"location":"electrical/fritzing/#fritzing-tips-and-tricks","title":"Fritzing Tips and Tricks","text":"<p>Straight wires look good, but it's often hard to have that happen with freehand dragging in Fritzing, instead, you can hold down the \"Shift\" key on your keyboard, restricting your wires to only bend at angles that are a multiple of 45\u00b0 (0\u00b0, 45\u00b0, 90\u00b0, etc.). If instead you want to make a wire curve, attach it to it's final location (where you want to wire it to), and then while holding down \"Ctrl\" on your keyboard drag the wire. This will cause the wire to curve to where you cursour drags.</p> <p></p> <p>You can enable, disable, or alter the size and properties of the grid by clicking \"View\" on the top of the screen. Then you can disable objects snapping to the grid by clicking the \"Align to Grid Option\" to change the size of the grid, instead click \"Set Grid Size...\" which will open a popup video where you can set the desired size.</p> <p></p>"},{"location":"fabrication/","title":"Fabrication","text":""},{"location":"programming/coding-standards/","title":"Team 401 Code Standards","text":"<p>Code standards are a set of guidelines and rules that software teams adhere to when writing code. This ensures consistency throught all codebases. These standards make it easier for developers to collaborate, maintain, and understand code, ultimately improving the quality and reliability of software.</p> <p>The Google Java Style Guide serves as a reference for developers working on Google projects. We will be using it as our baseline so by default, follow its rules. Any deviations or additions will be detailed here, but follow their document when in doubt.</p> <p>Right now, this document is incomplete and unconfirmed. Its word is not law.</p>"},{"location":"programming/coding-standards/#style-standards","title":"Style Standards","text":""},{"location":"programming/coding-standards/#spacing","title":"Spacing","text":"<p>We indent with 4 spaces.</p>"},{"location":"programming/coding-standards/#symbol-naming","title":"Symbol Naming","text":"<p>We do not use Hungarian prefixes/suffixes (eg: <code>m_RobotContainer</code>).  Instead, we follow cammel case convention (eg: <code>fluffyDog</code>). If you copy code from WPI's examples, rename the variables.</p> <p>Try to name your variables as clearly as possible. Include exactly what they represent and what units they are in. Variable names should be relatively brief: instead of <code>distanceToTravelInMeters</code>, try <code>travelDistanceMeters</code>.</p>"},{"location":"programming/coding-standards/#some-emphasized-items","title":"Some Emphasized Items","text":"<ul> <li>No single-line if/else blocks. (eg: No: <code>if (true) { completeAction() }</code>)</li> <li>One statement per line. (eg: No: <code>first(); second();</code>)</li> <li>One variable per declaration (Multi-declarations mess up the Gradle LSP). (eg: No: <code>int a, b = 5;</code>)</li> <li>Separate reserved words and brackets (<code>()</code>) or curly brackets (<code>{}</code>) with a space. (eg: No: <code>else{...}</code>, Yes: <code>else {...}</code>)</li> <li>When necessary, use parentheses to group complex math expressions. Do not assume people know Java's precise order of operations.</li> </ul>"},{"location":"programming/coding-standards/#frc-specific-guidelines","title":"FRC-specific guidelines","text":"<p>Commands can be named after nouns or verbs, but should not be confusing. A command that handles intaking in auto, but is not used in teleop or elsewhere, should be either named <code>AutoIntake</code>, or placed under folder marked for auto.</p>"},{"location":"programming/coding-standards/#code-review","title":"Code Review","text":"<p>Expect reviewers to comment on your code style and readability. They may request seemingly meaningless changes to variable names and file formatting. You should follow these requests in stride; keep in mind that reviewers are not critisizing your your programming skills. We just need all our code to look the same.</p>"},{"location":"programming/coding-standards/#installing-a-formatter","title":"Installing a Formatter","text":"<p>Don't worry, you won't have to style everything yourself. Formatters are scripts that automatically format your code to conform with the given guidelines. They can be installed in different layers of the development stack.</p>"},{"location":"programming/coding-standards/#vs-code","title":"VS Code","text":"<p>In order to automatically format a file, you can run <code>Format Document</code> in the command palette. The settings in <code>.vscode/settings.json</code> should match our specifications, but we can't guarantee this feature will cover everthing. Its primary use is in formatting code you copied from elsewhere, or large sections of code that looks wonky.</p>"},{"location":"programming/coding-standards/#gradle","title":"Gradle","text":"<p>TODO: Steps will be added on how to attach the formatter to <code>build.gradle</code>. Essentially, the formatter will run whenever the robot code is built.</p>"},{"location":"programming/coding-standards/#github-actions","title":"GitHub Actions","text":"<p>TODO: The GitHub repository will have an action to automatically format all code that is pushed to main. This does not mean that formatting should be disregarded on the individual's side though.</p>"},{"location":"programming/drive-with-joysticks/","title":"Drive With Joysticks Command","text":"<p>This command, placed inside of coppercore's wpilib_interface library, has several advanced features to help make driving smoother. These include:</p> <ul> <li>enhanced sensitivity via squaring the magnitude of linear and rotational velocities</li> <li>adjustable deadbands</li> <li>adjustable max speeds (linear and rotational)</li> </ul>"},{"location":"programming/drive-with-joysticks/#using-the-command","title":"Using the Command","text":""},{"location":"programming/drive-with-joysticks/#importing-library","title":"Importing Library","text":"<p>To import the command simply add this line to the robot code's build.gradle under dependencies similar to how other coppercore dependencies are added</p> <pre><code>dependencies {\n    ...\n    implementation \"io.github.team401.coppercore:wpilib_interface:$version\"\n    ...\n}\n</code></pre>"},{"location":"programming/drive-with-joysticks/#setting-up-drive-subsystem","title":"Setting Up Drive Subsystem","text":"<p>In order to use this command, the drive subsystem must implement the DriveTemplate located in wpilib_interface library:</p> <pre><code>public class SwerveDrive implements DriveTemplate {\n    ...\n}\n</code></pre> <p>Note: by implementing DriveTemplate, you DO NOT have to extend SubsystemBase, this step is already included within the DriveTemplate.</p>"},{"location":"programming/drive-with-joysticks/#adding-setgoalspeeds-method","title":"Adding SetGoalSpeeds method","text":"<p>The DriveTemplate also requires that the driveSubsytem have a setGoalSpeeds method. This is how the DriveWithJoysticks command will tell drive what speeds are being commmanded. An example of adding this to the talonfx-swerve used in 2025 is shown below.</p> <pre><code>public class Drive implements DriveTemplate {\n    public ChassisSpeeds goalSpeeds = new ChassisSpeeds();\n    //...\n    public void setGoalSpeeds(ChassisSpeeds speeds) {\n        this.goalSpeeds = speeds;\n    }\n\n    // NOTE: parameter was removed from this method since we set goal speeds elsewhere\n    public void runVelocity() { \n        // Calculate module setpoints\n        ChassisSpeeds discreteSpeeds = ChassisSpeeds.discretize(goalSpeeds, 0.02); // only difference is found on this line, where speeds discretized are based on set goal speeds\n        SwerveModuleState[] setpointStates = kinematics.toSwerveModuleStates(discreteSpeeds);\n        SwerveDriveKinematics.desaturateWheelSpeeds(setpointStates, TunerConstants.kSpeedAt12Volts);\n\n        // Log unoptimized setpoints and setpoint speeds\n        Logger.recordOutput(\"SwerveStates/Setpoints\", setpointStates);\n        Logger.recordOutput(\"SwerveChassisSpeeds/Setpoints\", discreteSpeeds);\n\n        // Send setpoints to modules\n        for (int i = 0; i &lt; 4; i++) {\n            modules[i].runSetpoint(setpointStates[i]);\n        }\n\n        // Log optimized setpoints (runSetpoint mutates each state)\n        Logger.recordOutput(\"SwerveStates/SetpointsOptimized\", setpointStates);\n    }\n}\n</code></pre> <p>Furthermore, to keep things uniform throughout code, any other commands for running velocity should now be sent to setGoalSpeeds method. Braking could be done like so <code>drive.setGoalSpeeds(new ChassisSpeeds(0));</code></p>"},{"location":"programming/drive-with-joysticks/#adjusting-runvelocity","title":"Adjusting RunVelocity","text":"<p>finally, remove the parameter from runVelocity method like above, and add this runVelocity method to the end of the drivetrains periodic method. If you notice drive isn't moving, you likely forgot this step.</p> <pre><code>@Override\npublic void periodic {\n    //...\n    this.runVelocity();\n    //...\n}\n</code></pre> <p>Note: This is needed because the DriveWithJoysticks command calls setGoalSpeeds every loop, however, without ever running runVelocity the robot would never move. Speeds would be updated but never sent to drive motors.</p>"},{"location":"programming/drive-with-joysticks/#adding-command-to-robotcontainer","title":"Adding Command to RobotContainer","text":"<p>This just involved setting the default command for drive to a new instance of the DriveWithJoysticks command. Linear and angular speeds should match the max of those set in drive subsystem.</p> <pre><code>drive.setDefaultCommand(\n    new DriveWithJoysticksCommand(\n        drive, // type: DriveTemplate\n        leftJoystick, // type: CommandJoystick\n        righJoystick, // type: CommandJoystick\n         maxLinearSpeed, // type: double (m/s)\n         maxAngularSpeed, // type: double (rad/s)\n         joystickDeadband // type: double\n    )\n);\n</code></pre> <p>Note: If joysticks behave with too much sensitivity (barely tapping causes movement) increase the deadband, maybe 0.05 -&gt; 0.1</p>"},{"location":"programming/phoenix-swerve/","title":"Using Phoenix Swerve","text":""},{"location":"programming/phoenix-swerve/#introduction","title":"Introduction","text":"<p>Swerve Drive is a unique type of drivetrain used in robotics. It allows a robot to move in any direction while maintaining any orientation (often referred to as holonomic drive). This is achieved by having each wheel on a separate swivel, allowing it to rotate independently. The wheels are typically driven by individual motors, providing precise control over the robot's movement. This makes Swerve Drive particularly useful in situations where agility and maneuverability are key. For more information on what swerve is, visit 6624's Swerve Docs.</p>"},{"location":"programming/phoenix-swerve/#generating-swerve-code","title":"Generating Swerve Code","text":"<p>401 uses CTRE's Phoenix Pro Swerve Generator for our swerve code. This lets us write less code and enables us to utilize Phoenix Pro's various benefits.</p> <p>Follow the tutorial on the generator site to create a new project.</p>"},{"location":"programming/phoenix-swerve/#common-errors-and-tips","title":"Common Errors and Tips","text":"<ul> <li>When verifying steer, you might encounter a problem where the \"Start\" and \"Stop\" buttons are missing, they are simply underneath the toolbar. Hide it and the buttons should appear!</li> <li>The variable <code>kSlipCurrentA</code> in <code>TunerConstants</code> should be the current at which the wheels start to slip per individual motor.</li> <li>When controlling the drivetrain with <code>setControl(...)</code>, make sure to include <code>.withDriveRequestType(DriveRequestType.Velocity)</code> inside the method. This will allow you to utilize the feedforward and feedback values you tuned earlier in <code>TunerConstants</code>. For example:</li> </ul> <pre><code>setControl(\n    new new SwerveRequest.FieldCentric()\n        .withVelocityX(vx)\n        .withVelocityY(vy)\n        .withRotationalRate(omega)\n        .withDeadband(0.0)\n        .withRotationalDeadband(0.0)\n        .withDriveRequestType(DriveRequestType.Velocity)\n);\n</code></pre>"},{"location":"programming/software-workflow/","title":"Software Development Workflow","text":"<p>This document outlines the process to follow when working on software projects on the team.</p>"},{"location":"programming/software-workflow/#github-issues","title":"GitHub Issues","text":"<p>Github Issues are the way we track the software work we are doing. If you are assigned to an already written issue, you can skip ahead to the Start Work section.</p>"},{"location":"programming/software-workflow/#create-an-issue","title":"Create an Issue","text":"<p>If you find a bug or come up with an idea for something to improve in the code, create an issue. To do this, go to the repository on GitHub, click the Issues tab, and then click \"New Issue\"</p> <p></p> <p>From there, name your issue something descriptive. To fill out the description section, consider using the following template:</p> <pre><code>**Summary**\n// Put a high level summary of the feature to add or problem to solve\n\n**Work Scope**\n// Make a list of work items/steps to do to work the task. If you don't know the steps, you could leave this blank and update it later.\n- Work item 1\n- Work item 2\n\n**Verification**\n// Make a list of things that need to be done to confirm that everything works before this issue is closed\n- Verification check 1\n- Verification check 2\n</code></pre> <p>On the right side panel, make sure to assign someone, add a label, and add the issue to a project/milestone. You can do this by clicking the gear icons.</p>"},{"location":"programming/software-workflow/#start-work","title":"Start Work","text":"<p>When starting work on an issue, it's helpful to mark the Issue as \"In Progress\" on whatever milestone it's on (if applicable). To start the code work, use your favorite Git client on your computer to checkout and pull the <code>main</code> branch (to get the latest updates). In Git bash this looks like:</p> <pre><code>git checkout main\ngit pull\n</code></pre> <p>Then create a new branch off of <code>main</code> with:</p> <pre><code>git checkout -b new-branch-name\n</code></pre> <p>Note: Work on only one github issue per branch. This helps avoid merge conflicts and other confusion when working on projects with other people.</p>"},{"location":"programming/software-workflow/#write-code","title":"Write Code","text":"<p>With the branch created, now you can write code. Typically this is done in VS Code when working on the robot codebase. The implementation details are issue specific, but there are best practices to follow outlined in the subsections below.</p> <p>Note: Make sure you are on the correct branch before writing code.</p>"},{"location":"programming/software-workflow/#commit-and-push","title":"Commit and Push","text":"<p>When reaching a development milestone, make sure to commit your code and push it to remote. Some examples of a development milestone are:</p> <ul> <li>Finishing a step of the work plan</li> <li>Completing code prior to making a pull request</li> <li>Responding to code reviews</li> </ul> <p>You also must commit and push your code before leaving at the end of the day. This allows others to have visibility on what you are working on, and makes it possible for people to keep making progress if you can't make a meeting.</p> <p>To commit your code, make sure to add the files you want to the commit (stage the changes). To add all the files in the current directory with Git Bash:</p> <pre><code>git add .\n</code></pre> <p>Then make a commit. Commits should have useful messages and it is helpful if they contain a reference to the issue number your branch is related to.</p> <pre><code>git commit -m \"#issue-number: a helpful and concise message that details the work done in this commit\"\n</code></pre> <p>Finally, push the code to GitHub:</p> <pre><code>git push\n</code></pre> <p>If an error appears, follow instructions in the terminal or ask a lead programmer / mentor.</p>"},{"location":"programming/software-workflow/#keep-branch-updated","title":"Keep Branch Updated","text":"<p>When developing code, the working branch should be kept up to date with the most recent changes. Maintaining your branch is helpful because it:</p> <ul> <li>Reduces merge conflicts with the <code>main</code> branch.</li> <li>Increases confidence that your code will work when merged to <code>main</code>.</li> </ul> <p>There are many ways to keep the branch updated. We will use rebase because it maintains linear history.</p> <p>TODO: Put a diagram explaining how rebase works</p> <p>First, make sure <code>main</code> is updated:</p> <pre><code>git checkout main\ngit pull\n</code></pre> <p>Now you can rebase the current branch on top of <code>main</code> like so:</p> <pre><code>git checkout branch-you-want-to-rebase\ngit rebase main\n</code></pre> <p>Rebase works by going through each commit and stacking it on top of the parent branch (in this case <code>main</code>). If there are merge conflicts for any commit, rebase will pause for you to resolve the conflict. You can resolve the conflict in VS Code and then do the following to continue the rebase:</p> <pre><code>git add .\ngit rebase --continue\n</code></pre> <p>After a successful rebase, whenever you want to push the code to GitHub you will need to do so with force. It is best practice to do the following:</p> <pre><code>git push --force-with-lease\n</code></pre> <p>However, if you know that nobody else is working on your branch you can do</p> <pre><code>git push -f\n</code></pre>"},{"location":"programming/software-workflow/#make-a-pull-request","title":"Make a Pull Request","text":"<p>Once you believe your code is ready to merge into the <code>main</code> branch, make a pull request (PR) on GitHub. The first time you push a branch in Git bash (or any command line interface), git will give you a link to create a PR. You can do this even if the code is ready (see Draft Pull Requests), but if you didn't use the link you can create a PR using the following steps</p> <ol> <li>Navigate to the repository on GitHub</li> <li>Click on the Branches button: </li> <li>Look for your branch. Click the \"New Pull Request\" button: </li> </ol> <p>If the \"New Pull Request\" button isn't available, then a PR already exists for the branch. You should be able to see that for your branch. 4. Name the pull request something descriptive and fill out the description with a bulleted list of changes you made. 5. Click \"Create pull request\" (or hit the down arrow and click \"Create draft pull request\" if it isn't ready for review). 6. If creating a PR for review (not a draft), then assign someone on the programming team to review it.</p>"},{"location":"programming/software-workflow/#draft-pull-requests","title":"Draft Pull Requests","text":"<p>You can create draft PRs whenever you have some code that isn't ready to review. This can be helpful to see the code diff prior to asking for a review.</p> <p>When your draft PR is ready for review, mark it as \"Ready for Review\" and then assign someone to review the PR.</p>"},{"location":"programming/software-workflow/#code-review","title":"Code Review","text":""},{"location":"programming/software-workflow/#as-the-reviewer","title":"As the Reviewer","text":"<p>Things you should do during a code review:</p> <ul> <li>Check that code quality standards are being followed</li> <li>Ensure that the changes are the ones we wanted to make (see the relevant ticket for details)</li> <li>See if any new algorithm logic makes sense</li> <li>Look to see if any important code was deleted</li> <li>Request additional code comments if things aren't very clear</li> <li>Leave helpful code snippets in comments if needed</li> <li>Ask questions about the code if something doesn't make sense</li> <li>Resolve your comments whenever the code author addresses the problem</li> </ul> <p>Things you should avoid doing as the code reviewer:</p> <ul> <li>Write new code for the PR</li> <li>Closing the pull request. Let the code author do this if needed</li> <li>Merging the code. Let the code author do this</li> </ul> <p>Leave comments by clicking on lines of code and writing a message. You can leave single comments or start a review - starting a review is preferred. Then you can leave an overall message on the review when you submit your review status (Accepted, Changes Requested, or Comment).</p> <p>If you don't want to accept the code changes due to problems you see, you should \"Request Changes\". If you just have comments or general questions, Comment is the best status to set. Of course if the code is good to go, then you would want to Accept the changes.</p>"},{"location":"programming/software-workflow/#as-the-author","title":"As the Author","text":"<p>Things you should do during a code review as the code author:</p> <ul> <li>Respond to comments made by reviewer(s) and push new code as needed</li> <li>Keep the branch up to date by rebasing</li> <li>\"Squash and Merge\" the code when the review is Accepted and CI passes</li> </ul> <p>Things you should avoid doing during a code review:</p> <ul> <li>Resolving comments by reviewer(s). Let them resolve their comments when they are satisfied that they have been answered</li> <li>Updating the branch with the GitHub \"Update Branch\" button</li> <li>You can do this if the code is accepted and CI is passing. But if you do it before that, then it creates a merge commit and makes your own development more difficult if you need to make changes</li> <li>Merging the code prior to CI passing and/or review approval</li> <li>The repository settings should not allow this, but don't do it. You can use \"auto-merge\" if you don't want to wait for CI to pass and GitHub will merge your code for you.</li> </ul>"},{"location":"programming/software-workflow/#finish-work","title":"Finish Work","text":"<p>Once all work is complete on a GitHub issue (via one or more PRs), leave a comment in the issue with the relevant PR(s) that did the work and close the issue.</p>"},{"location":"programming/getting-started/","title":"Getting Started","text":"<p>Follow the steps in this document to begin contributing to robot software projects on the team.</p>"},{"location":"programming/getting-started/#create-github-account","title":"Create GitHub Account","text":"<p>First, you will need to create a GitHub account in order to access the code repositories the team uses. Give your username to the lead programmer or a programming mentor and they will add you to the GitHub organization.</p>"},{"location":"programming/getting-started/#install-required-software","title":"Install Required Software","text":"<p>Next, download the required software:</p> <ul> <li>Installing Git</li> <li>Installing WPILib</li> </ul> <p>After these programs are installed, your development environment is ready to use.</p>"},{"location":"programming/getting-started/#install-optional-software","title":"Install Optional Software","text":"<p>Consider installing some of the Optional Software as needed. Normally you do not need to do this unless you are the lead programmer or if you are working on specific hardware.</p>"},{"location":"programming/getting-started/#learn-the-language","title":"Learn the Language","text":"<p>On 401, we use Java to program the robot. If you're coming from AP CSA, read the Post-CSA Supplement. Otherwise, please learn Java.</p>"},{"location":"programming/getting-started/#understand-the-process","title":"Understand the Process","text":"<p>Becoming familiar with the following resources is required before contributing to the repository:</p> <ul> <li>The Software Development Workflow defines the process for making code changes on the team.</li> <li>Learn about our Coding Standards to ensure your code passes review.</li> </ul>"},{"location":"programming/getting-started/#understand-our-library-coppercore","title":"Understand our Library: Coppercore","text":"<p>Coppercore is our way of keeping useful code the same year-year. Classes in this library help find locations on a field, add deadbands to joysticks, and interface with wpilib</p>"},{"location":"programming/getting-started/#use-coppercore-in-a-new-project","title":"Use Coppercore in a new project","text":""},{"location":"programming/getting-started/installing-git/","title":"Installing Git","text":"<p>On Windows, follow this link to go to the Git homepage.</p> <p></p> <p>Click the blue download button inside the picture of a computer monitor.  This screenshot shows the Windows version selected, but the link should automatically be set for whatever operating system you are using.</p> <p>If you are on a Linux or Macintosh, <code>git</code> should already be installed or can be installed through the package manager of your OS.</p>"},{"location":"programming/getting-started/installing-git/#setting-up-git-access-to-a-repository","title":"Setting up git access to a repository","text":"<p>When you are cloning a private repository, or pushing changes to one, you need to be authenticated by Github.  This requires the use of a private key or of a token.  We suggest that you create a personal access token (PAT).</p> <p>Go to Personal Access Tokens on github.com. The link should work, if it doesn't, go to  Settings, then Developer Settings, then Personal Access Tokens:</p> <p></p> <p>Check the repo box, give it a name and an expiration date, and create the token. Once created, copy the key and store it somewhere secure. GitHub will only display it to you once, so it's important to store it elsewhere so that you can use it to authenticate later.</p> <p>Your token will look like this: <code>ghp_rv4djkhsdfEWIkJHSKJfd787fsRV</code>.</p> <p>Now you are able to use this token as follows. Whenever you are cloning a Github repository, use the <code>https</code> method (not <code>ssh</code>) and insert the token in the URL.</p> <p>For instance, the repo for these Docs is at <code>https://github.com/team401/Docs.git</code> when  using the <code>https</code> methods, which is shown here: </p> <p>You would therefore use <code>https://ghp_rv4djkhsdfEWIkJHSKJfd787fsRV@github.com/team401/Docs.git</code> to clone  it using your token, for instance, <pre><code>git clone https://ghp_rv4djkhsdfEWIkJHSKJfd787fsRV@github.com/team401/Docs.git\n</code></pre></p> <p>It is also possible to change the method of authentication after the fact. We could use this on shared laptops that may be used by multiple students if they end up working in the same project directory. For instance, to change the current upstream URL of a repo, use <pre><code>git remote set-url origin https://ghp_rv4djkhsdfEWIkJHSKJfd787fsRV@github.com/team401/Docs.git\n</code></pre> To ensure that commit messages appear under your name, you should also reset the name and email settings for this repo. <pre><code>git config --local user.email your@email\ngit config --local user.name \"Your Name\"\n</code></pre></p> <p>Note this method is not necessary if students work in different project directories. In that case, the settings from the active project directory will be used.</p> <p>Side note an alternative authentication method is to use private ssh keys, in which case  the remote URL will start with <code>git@github.com</code>, e.g. <code>git@github.com:team401/Docs.git</code>.</p>"},{"location":"programming/getting-started/installing-wpilib/","title":"Installing WPILib","text":"<p>WPILib is the core FRC library that the programming team uses to create code for the robots. By installing the WPILib you get:</p> <ul> <li>VSCode, which is an integrated development environment (IDE) that works best with the WPILib</li> <li>Java JDK</li> <li>Gradle</li> <li>Tools (SmartDashboard, Shuffleboard, etc.)</li> </ul> <p>Follow the instructions in the WPILib Docs to install the WPILib and VS Code (we use the recommended settings).</p>"},{"location":"programming/getting-started/optional-software/","title":"Optional Software","text":"<p>If you are just trying to get started with progrmaming, don't worry about installing the Optional software yet.</p>"},{"location":"programming/getting-started/optional-software/#vendor-specific-tools","title":"Vendor Specific Tools","text":"<p>Some FRC vendors, such as Cross the Road Electronics and REV Robotics, provide their own software tools for configuring their components.  The installation instructions for these tools can be found on the vendor websites.  Latest versions of these tools should be installed on the Driver Station laptop.  If you are the Lead Programmer, you are responsible for ensuring the latest version of this software is installed on the Driver Station laptop!</p>"},{"location":"programming/getting-started/optional-software/#common-vendor-tools","title":"Common Vendor Tools","text":"<ul> <li>Rev Hardware Client</li> <li>CTRE Tuner X</li> </ul>"},{"location":"programming/getting-started/optional-software/#elastic-dashboard","title":"Elastic Dashboard","text":"<p>The WPIlib suite comes with SmartDashboard and the Shuffleboard dashboard, but SmartDashboard is extremely bare and students tend to report Shuffleboard as buggy and tiresome to use. Elastic Dashboard is a newer Fluttr dashboard prefered by the drive team. The Lead Programmer should ensure that Elastic is installed on the Driver Station laptop. This is what the drive team is used to using to check robot status and select the auto routine.</p>"},{"location":"programming/getting-started/optional-software/#frc-update-suite-windows-only","title":"FRC Update Suite (Windows Only)","text":"<p>The FRC Update Suite is a large installer released by FIRST and National Instruments every year.  Despite the confusing name, the installer is actually standalone, and does not \"update\" anything.  The Update Suite will remove older versions of itself if installing a new version, but it can also be installed by itself without any previous versions.  The FRC Update Suite installs the following software:</p> <ul> <li>Driver Station: The program that is used to control the physical robot.  It reads joysticks and other input devices attached to your computer, and transmits them to the robot.  It also manages the enabled state of the robot, and the robot cannot be enabled without it.  Only one Driver Station can be connected to the robot at a time.  This FIRST ScreenSteps page has a more detailed overview of the Driver Station.</li> <li>roboRIO Imaging Tool: The program that is used to update the operating system and firmware of the roboRIO.  This FIRST ScreenSteps page has a more detailed overview of the Imaging Tool, as well as instructions on how to use it on a roboRIO.</li> <li>Other software: The Update Suite also contains other miscellaneous software that is typically not ever used on our team.</li> </ul> <p>The Update Suite is optional.  Nothing inside it is important to the code development process, and the two important components are installed on our Driver Station laptop.  This laptop can be used to enable and test the robot, as well as to image the roboRIO.  The Update Suite is also only compatible with Windows (7 and higher).  This FIRST ScreenSteps page shows how to install the Update Suite.  If you are the Lead Programmer, you are responsible for ensuring the latest version of this software is installed on the Driver Station laptop!</p>"},{"location":"programming/getting-started/optional-software/#frc-radio-configuration-utility-windows-only","title":"FRC Radio Configuration Utility (Windows Only)","text":"<p>The Radio Configuration Utility is used to configure the Wi-Fi radio (router) used onboard the robot.  This utility can be run in several different modes:</p> <ul> <li>Team Mode: This mode configures the radio to create a Wi-Fi network.  This allows the Driver Station to connect directly to the robot, and we use this mode for robots that will be used at demos.  If you are the Outreach Director, you are responsible for ensuring that a radio configured in this mode is present on the robot prior to a demo.  Contact the Lead Programmer if necessary.  The orange \"field radio\" WILL NOT WORK outside of the shop.</li> <li>Offseason Mode: This mode is designed to configure radios for offseason events, but we use it to configure our orange \"field radio\" to connect to the black Wi-Fi router mounted on the wall near the door.  The Driver Station laptop is connected to the black router directly via an ethernet cable.  This setup ensures a highly reliable connection to the robot, and we use this mode on the current year's robot when testing it in the shop.  If you are the Lead Programmer, you are responsible for ensuring the \"shop radio\" is configured at all times in this mode!</li> <li>Event Mode: This mode is not accessible by teams, but is used at actual events.  Special laptops are present at all events to configure radios to event mode, which allows them to communicate with the field.</li> </ul> <p>The Radio Configuration utility is written in Java, but only works on Windows due to the way FIRST chose to implement the underlying network code.  This utility is optional.  This software will always be present on the Driver Station laptop, and radios very infrequently have to be reconfigured.  This FIRST ScreenSteps page shows how to install the Radio Configuration Utility.</p>"},{"location":"programming/getting-started/post-csa/","title":"Post CSA Supplement","text":"<p>If you've taken AP CSA, you have a pretty good overview of the Java language and its features. However, some Java features are left out. Here's a short overview of the features we use that aren't covered in CSA.</p>"},{"location":"programming/getting-started/post-csa/#interfaces","title":"Interfaces","text":"<p>See: W3 Schools, Oracle</p> <p>In brief, an interface is like a class, except it defines no instance variables, does not define a constructor, and cannot have instances constructed directly. Additionally, methods described in an interface have no body unless the <code>default</code> keyword is used.</p> <p>Q: So what? It's just a list of methods?</p> <p>A: That's exactly what it is.</p> <p>The benefit of an interface is that it's a contract. The interface defines a set of method signatures for classes to implement, and any class can implement them. Classes can also implement more than one interface, as opposed to only extending one class.</p> <p>When writing robot code, we tend to prefer interfaces to super classes when:</p> <ul> <li>We're trying to isolate IO from subsystem logic, eg: <code>private ArmIO io;</code> -- there's no 'true' <code>ArmIO</code>, only different implementations. We don't have to start out with a default class that implements all of the arm's behavior, and then pave over it with subclasses. See the AdvantageKit documentation for more details.</li> <li>We're trying to describe an optional property/behavior a subsystem can have, eg: in 2024 we defined the <code>Tunable</code> interface, which provided utility methods to tune the mechanisms of a subsystem.</li> </ul>"},{"location":"programming/getting-started/post-csa/#generics","title":"Generics","text":"<p>See: Geeks For Geeks, Oracle</p> <p>Generics allow the programmer to write a class that interacts with some type. They're useful for list data structures and container classes. In the context of a robot program, you're likely to encounter them in library features more often than you write them. However, if we continue to develop an in-house utility library, they will prove invaluable.</p>"},{"location":"programming/getting-started/post-csa/#enums","title":"Enums","text":"<p>See: W3 Schools, Oracle</p> <p>Enums are useful for defining a fixed number of states or conditions without relying on sentinel integers or strings. In robotics, they're most helpful in developing state machines and an 'action' system to control subsystems.</p>"},{"location":"programming/getting-started/post-csa/#lambdas-and-functional-interfaces","title":"Lambdas and Functional Interfaces","text":"<p>See: W3 Schools, Oracle, Baeldung</p> <p>Explaining functional programming lies mostly beyond my abilities. I will venture to clear up some confusion I've seen regarding lambda expressions.</p> <pre><code>class Main {\n    public static void main(String[] args) {\n        Runnable a = () -&gt; someMethod();\n        a.run(); // Hi there!\n\n        Runnable b = Main::someMethod;\n        b.run(); // Hi there!\n\n        Runnable c = () -&gt; someOtherMethod(17);\n        c.run(); // The number is 17\n\n        Runnable d = Main::someOtherMethod; // DOES NOT COMPILE\n        // someOtherMethod() needs a parameter\n\n        Runnable e = Main::someMethod(); // DOES NOT COMPILE\n        // Class::method creates a method reference, and does not include '()'\n\n        Runnable f = Main::someOtherMethod(17); // DOES NOT COMPILE\n        // A method reference refers to the method directly, and does not\n        // allow you to specify a parameter. Main::someOtherMethod is a valid\n        // Consumer&lt;Integer&gt;.\n\n        Runnable g = () -&gt; Main::someMethod; // DOES NOT COMPILE\n        // this expression is nonsensical, like\n        // void f() {\n        // \"Why would a string be alone like this?\";\n        // }\n    }\n\n    public static void someMethod() {\n        System.out.println(\"Hi there!\");\n    }\n\n    public static void someOtherMethod(int i) {\n        System.out.println(\"The number is \" + i);\n    }\n}\n</code></pre>"},{"location":"programming/hardware-setup/","title":"Hardware Setup","text":"<p>Before integrating code to the robot, the RoboRIO and Radio both need to be configured. This contains instructions for how to do this.</p>"},{"location":"programming/hardware-setup/radio-programming/","title":"Radio Programming","text":"<p>As of the 2025 season, Team 401 uses the VH-109 radio from VividHosting.</p> <p>The quick start guide from the VividHosting Docs is pretty good. However, the documentation for how to configure the radios can be slightly confusing.</p>"},{"location":"programming/hardware-setup/radio-programming/#configuring-a-radio-for-shop-testing","title":"Configuring a radio for shop testing","text":"<p>The radio configuration that we have found to be best is to configure the radio in \"Robot Radio Mode\".</p> <p>We recommend suffixing your radios with something unique, and labelling them as such. For instance, we suffix our radios with their year and a number.</p> <p>Configuring the radio in \"Robot Radio Mode\" will make the radio act as a Wifi 6 client, and it will try to connect to an access-point. To use it for at home testing, do one of the following:</p>"},{"location":"programming/hardware-setup/radio-programming/#use-a-second-vh-109-as-an-access-point","title":"Use a second VH-109 as an access point","text":"<p>For testing with Wifi 6 performance, configure a second VH-109 as an access point. Instructions for this can be found on the VividHosting docs website.</p> <p>You will still need the radio on your robot to be configured as a robot radio. You will also need a way to power the access point radio using some sort of wall adapter</p> <p>To connect to the radio for shop testing, you can:</p> <ul> <li>Use a wifi-6 capable laptop</li> <li>Use an ethernet cable to connect directly to the access point radio</li> </ul>"},{"location":"programming/hardware-setup/radio-programming/#use-the-robot-radio-as-a-24-ghz-access-point","title":"Use the Robot Radio as a 2.4 GHz Access Point","text":"<p>When DIP switch #3 is in the on position, it enables the radio's 2.4ghz access point mode. When the radio cannot connect to a wifi 6 access point and is not connected to a computer via ethernet, it will begin broadcasting its own network. This means that a radio configured in \"Robot Radio Mode\" can be used just like an older version 2.4ghz radio and function as an access point, with the only configuration change necessary being enabling DIP switch #3.</p>"},{"location":"programming/hardware-setup/radio-programming/#quickly-configuring-multiple-radios","title":"Quickly Configuring Multiple Radios","text":"<p>Sometimes, you may need to quickly flash multiple radios (e.g. a new release of radio firmware comes out, or it is a new FRC season, and you need to update all of the radios in the shop).</p> <p>The following steps will guide you through the most expedient way to do this. More detailed, better instructions can be found in VividHosting's docs.</p>"},{"location":"programming/hardware-setup/radio-programming/#initial-setup","title":"Initial Setup","text":"<p>This method uses a robot to power the radio. Power your radio using the robot's electrical setup.</p> <ol> <li> <p>First, download and extract the network assistant tool from Vivid-Hosting. This tool automatically configures a static IP address for your ethernet port.</p> </li> <li> <p>Next, navigate to the radio firmware page and download both the release for radios prior to 1.2.0 AND the release for radios currently at 1.2.x. Keep this page open so that you can easily copy the checksums when installing the firmware later.</p> </li> </ol> <p>With these 3 resources downloaded, you can start configuring your first radio.</p>"},{"location":"programming/hardware-setup/radio-programming/#for-each-radio","title":"For Each Radio","text":"<p>Repeat these steps for each radio you configure.</p> <ol> <li> <p>With the robot off, wire the radio to be powered. Technically, you could power the radio with a power adapter as well, but if you already have a robot on hand it is convenient to use it for power.</p> </li> <li> <p>Turn the robot on, and connect your computer to the robot radio using the <code>DS</code> port on the radio.</p> </li> <li> <p>Run the Network Assistant Tool (it must be run as administrator). Select the ethernet port that you connected the radio to, and click the button to configure the port. It seems that sometimes the configuration form renders incorrectly if you don't run the Network Assistant Tool every time you configure a radio, even if you ran it when you configured the last radio.</p> </li> <li> <p>Wait for the radio to be powered on, based on the LED status indicators. The PWR light will be ON and the SYS light will either be ON or blinking at 1hz.</p> </li> <li> <p>Check the current firmware version: Once radio has finished booting, refresh the configuration page and navigate to \"(radio ip)/status\"  in your browser to check the status (the radio IP will already by in the URL after being opened by the Network Assistant Tool). Near the bottom of the status page, the current firmware version will be displayed. This version will tell you what firmware version to install in the next step:</p> </li> </ol> <p>If the version is before 1.2.0, you will have to use the firmware file that ends in a string of numbers.</p> <p>If the version is 1.2.x or later, use the firmware file that ends in 1.2_X.</p> <ol> <li> <p>Navigate back to the configuration page. Select the correct firmware file. Then, go back to the firmware downloads page that you download earlier, and copy the checksum from the file. Paste it in the field of the radio configuration page and click upload.</p> </li> <li> <p>Wait for the radio to finish installing firmware. You will know it is done when the SYS light stops blinking quickly and instead is either solid ON or blinking at 1hz.</p> </li> <li> <p>Scroll to the top of the page, select \"Robot Radio Mode,\" type in your team number, and any network suffix you want, and choose a password. Click 'configure'.</p> </li> <li> <p>You can verify that the configuration is updated, unplug the ethernet cable that connects your computer to the radio. Then, turn DIP switch #3 to the ON position and refresh your computer's wifi menu until the radio's wifi network appears.</p> </li> </ol>"},{"location":"programming/vision/","title":"Vision","text":"<p>Modelled after the 2025 advantage kit vision template, this vision subsystem runs on photon vision. Within the subsystem, poses are rejected according to their field position and average tag distance. If they aren't rejected, they are then passed on to the drive's pose estimator.</p>"},{"location":"programming/vision/#dependencies","title":"Dependencies","text":"<ul> <li>AdvantageKit - used for the advanced logging provided within AdvantageScope</li> <li>PhotonVision - framework used to read results from cameras and filter poses out from AprilTags</li> </ul>"},{"location":"programming/vision/apriltag-accuracy/","title":"What Affects AprilTag Accuracy?","text":"<p>Strangely, there don't seem to be very comprehensive resources on the factors influencing the accuracy of an AprilTag pose. Here's some information we've been able to accumulate on the topic.</p> <p>Future documenters: Just because this page has many words in it does not mean it's done. This page is based on the anecdotal experience of one senior, and makes a starting point, but not taken as gospel.</p>"},{"location":"programming/vision/apriltag-accuracy/#number-of-tags","title":"Number of Tags","text":"<p>We recommend setting your AprilTag strategy in PhotonVision to <code>MULTI_TAG_PNP_ON_COPROCESSOR</code>. PNP is an algorithm that takes a set of points in screen-space with known real-world location and extrapolates the location of the camera. This algorithm gets more accurate with more points. We recommend rejecting single-tag camera measurements, as PNP fails to produce consistent results with only four points. To learn more about this affect, read about pose ambiguity on WPIlib Docs.</p>"},{"location":"programming/vision/apriltag-accuracy/#distance","title":"Distance","text":"<p>The accuracy of an AprilTag measurement is inversely proportional to the average distance of the tags from the camera. We don't have a standardized mechanism for gauging accuracy based on distance, but it is recommended to test heavily, especially in auto.</p>"},{"location":"programming/vision/apriltag-accuracy/#angle","title":"Angle","text":"<p>Unlike distance, the average angle of an AprilTag measurement produces unreliable results both when it is too big and too small. We recommend gating the maximum average tag angle at between 60\u00b0 and 100\u00b0, and adjusting the minimum angle based on the tag layout of the field. A minimum angle is often less necessary than a maximum angle as it produces less detrimental variations.</p>"},{"location":"programming/vision/apriltag-accuracy/#calibration","title":"Calibration","text":"<p>While the average tag distance and angle will always cause inaccuracies eventually, they tend to exasperate poor camera calibrations. Be sure to read the calibration section of PhotonVision Docs thoroughly. As of the 2024 season, we recommend using the builtin PhotonVision camera calibration process, with the MrCal checkbox enabled.</p> <p>If two cameras are identical, a finals-match-in-four-minutes calibration solution might include copying the calibration data from one camera to another. This sort of works, but can introduce inaccuracies. If time allows, calibrate every camera individually and be sure to back up the <code>json</code> file in a memorable location.</p>"},{"location":"programming/vision/apriltags/","title":"Using AprilTags","text":"<p>AprilTags are a vital part of the modern FRC control system. They allow a robot to localize itself on the field without relying on dead-reckoning. Use the topics on this document to set up a robust AprilTag localization system.</p>"},{"location":"programming/vision/apriltags/#photonvision","title":"PhotonVision","text":"<p>Team 401 uses a piece of open-source software called PhotonVision to run our vision pipeline. We recommend reading their docs to learn how to set it up for your year. Also feel free to read Common PhotonVision Problems.</p>"},{"location":"programming/vision/apriltags/#overlayroot","title":"Overlayroot","text":"<p>If you're using a Beelink or other mini-PC running Ubuntu Server, we recommend setting up <code>overlayroot</code> to ensure the operating system survives a sudden power loss. If the PC shuts of suddenly without overlayroot enabled, you risk breaking the OS installation, and you will have to reinstall. See Using Overlayroot for more details.</p>"},{"location":"programming/vision/apriltags/#kalman-filter","title":"Kalman Filter","text":"<p>As far as an FRC student is concerned, a Kalman filter is a giant pile of linear algebra that combines measurements from unreliable sources. For a robot pose estimator, one can specify expected standard deviations for the x-axis, the y-axis, and robot rotation or theta. For detailed, high school-level information on the mechanics of a Kalman filter, look here, here, or at the Matlab video series on the subject. For information on using WPIlib's pose estimator object, look here.</p> <p>For more information on what should inform AprilTag standard deviations, read What Affects AprilTag Accuracy?</p>"},{"location":"programming/vision/overlayroot/","title":"Using Overlayroot","text":"<p><code>overlayroot</code> is a Linux utility that makes your filesystem appear read-only. If a file is saved or edited, changes will still appear, but the filesystem will reset to some default arrangement after a reboot. Knowing how to enable and disable overlayroot often proves to be a vital skill during competition, in case configurations on the coprocessor need to be changed.</p>"},{"location":"programming/vision/overlayroot/#installation","title":"Installation","text":"<p>Overlayroot can be installed with <code>sudo apt install overlayroot</code>. Along with installing the utility, this creates an empty file at <code>/etc/overlayroot.conf</code>.</p>"},{"location":"programming/vision/overlayroot/#configuration","title":"Configuration","text":"<p>In the context of a 401 PhotonVision coprocessor, the overlayroot config file is only ever in one of two states:</p> <pre><code>overlayroot=\"\"\n</code></pre> <p>...which disables overlayroot, and:</p> <pre><code>overlayroot=\"tmpfs:swap=1,recurse=0\"\n</code></pre> <p>...which enables overlayroot with desirable settings. The details about these settings aren't relevant in this context, but can be googled easily (this is a good article).</p> <p>We would recommend arranging this file like so:</p> <pre><code># ON:\noverlayroot=\"tmpfs:swap=1,recurse=0\"\n\n# OFF:\n#overlayroot=\"\"\n</code></pre> <p>...with the currently inactive configuration commented out. We would also recommend adding a brief text file to the home directory explaining this file's location, along with how to enable and disable overlayroot.</p>"},{"location":"programming/vision/overlayroot/#enablingdisabling-overlayroot","title":"Enabling/Disabling Overlayroot","text":"<p>The process of enabling overlayroot when it is disabled should be fairly obvious: edit the config file using <code>sudo vim</code> or <code>sudo nano</code>, and reboot the device.</p> <p>Disabling overlayroot when it is enabled is more complicated. If the config file is edited and the device rebooted, the config file will revert, and overlayroot will remain enabled! In order to make persistent file changes when overlayroot is enabled, run <code>sudo overlayroot-chroot</code>. Now the config file can be edited, and the filesystem will be mutable after a reboot.</p> <p>In conclusion, to enable overlayroot:</p> <ol> <li>Run <code>sudo nano /etc/overlayroot.conf</code></li> <li>Edit the file so that the uncommented section reads <code>overlayroot=\"tmpfs:swap=1,recurse=0\"</code></li> <li>Save and reboot</li> </ol> <p>To disable overlayroot:</p> <ol> <li>Run <code>sudo overlayroot-chroot</code></li> <li>Run <code>nano /etc/overlayroot-chroot</code></li> <li>Edit the file so that the uncommented section reads <code>overlayroot=\"\"</code></li> <li>Save, <code>exit</code> and reboot</li> </ol>"},{"location":"programming/vision/photonvision-problems/","title":"Common PhotonVision Problems","text":""},{"location":"programming/vision/photonvision-problems/#when-i-select-one-of-my-cameras-the-feed-doesnt-change-and-my-settings-dont-persist","title":"When I select one of my cameras, the feed doesn't change, and my settings don't persist","text":"<p>Assuming you waited a few seconds before trying to change settings, this is most likely happening because the name of your camera is the same as that of another camera. If you're using Arducam cameras, install the Arducam Serial Number Modification Tool and change the name of one or both of the conflicting cameras. We recommend naming cameras in accordance with their position on the robot, eg: <code>front-right</code>, <code>back-center</code>.</p>"},{"location":"programming/vision/photonvision-problems/#i-cant-ping-my-coprocessor","title":"I can't ping my coprocessor","text":"<p>Ping (or ssh)<code>photonvision.local</code> instead of the device's actual IP. It seems like the PhotonVision daemon somehow disrupts standard Ubuntu Server networking configs.</p>"},{"location":"programming/vision/photonvision-problems/#i-get-a-something-nasty-error-message-when-i-try-to-ssh-into-the-coprocessor","title":"I get a 'Something Nasty' error message when I try to ssh into the coprocessor","text":"<p>This means you connected to a different device on the same address (probably another PhotonVision coprocessor). Run <code>ssh-keygen photonvision.local</code> and the issue should be resolved.</p>"},{"location":"programming/vision/photonvision-problems/#if-all-else-fails-rtfm","title":"If all else fails, RTFM","text":"<p>If your problem is not one of those covered above, try looking at the troubleshooting section of PhotonVision docs.</p>"},{"location":"programming/vision/vision-in-code/","title":"Import coppercore vision project into robot code","text":"<p>To import vision simply add this line to the robot code's build.gradle under dependencies similar to how other coppercore dependencies are added</p> <pre><code>dependencies {\n    ...\n    implementation \"io.github.team401.coppercore:vision:$version\"\n    ...\n}\n</code></pre>"},{"location":"programming/vision/vision-in-code/#adding-vision-to-robotcontainerjava","title":"Adding Vision to RobotContainer.java","text":""},{"location":"programming/vision/vision-in-code/#initialize-vision","title":"Initialize Vision","text":"<p>Begin by initializing drive subsystem followed by instantiating a VisionLocalizer with VisionIO's based on simulation / real / replay \\</p> <p>Sim Example:</p> <pre><code>vision =\n            new VisionLocalizer(\n                swerveDrive::addVisionMeasurement,\n                VisionConstants.fieldLayout,\n                new double[0],\n                new VisionIOPhotonSim(\"front\", robotToCamera0, swerveDrive::getPose, VisionConstants.fieldLayout),\n                new VisionIOPhotonSim(\"back\", robotToCamera1, swerveDrive::getPose, VisionConstants.fieldLayout));\n</code></pre> <p>VisionIO classes expect a name, robot to camera translation, pose supplier, and field layout. Additionally, the visionConsumer can be changed within a later method by running <code>vision.setVisionConsumer(yourConsumer)</code>.</p> <p>Note: This allows for adding a dummy method during initialization (accepting a Pose2d, double, and Matrix and returning nothing). However, a real method should be added later (possibly after running null check on drive) to ensure vision estimates are incorporated."},{"location":"programming/vision/vision-in-code/#using-replay","title":"Using Replay","text":"<p>For replay, io implementations are disabled (the same number of io's should still be added) like so:</p> <pre><code>vision = new VisionLocalizer(swerveDrive::addVisionMeasurement, VisionConstants.fieldLayout, new double[0], new VisionIO() {}, new VisionIO() {});\n</code></pre>"},{"location":"programming/vision/vision-in-code/#looking-at-vision-logs","title":"Looking at Vision Logs","text":""},{"location":"programming/vision/vision-in-code/#inputs","title":"Inputs","text":"<p>Each VisionIO has auto logged inputs. These include a connected status, latest target observed, poses observed, tags used, and the average tag distance. By looking at the tag id's, it is easy to see how well your camera is performing, higher tag counts show good camera placement</p>"},{"location":"programming/vision/vision-in-code/#outputs","title":"Outputs","text":"<p>This is where the benefit of Advantage Kit comes in. A plethora of data is available including a list of all poses observed, which ones were rejected, and which ones were accepted.</p>"},{"location":"programming/vision/vision-in-code/#individual-camera-data","title":"Individual Camera Data","text":"<p>Located under <code>RealOutputs/Vision/camera/(index)</code></p> <p>this is where you can find the poses observed by the individual camera. It is helpful to look here to make sure each camera is placed in an optimal spot for viewing AprilTags.</p>"},{"location":"programming/vision/vision-in-code/#summary-data","title":"Summary Data","text":"<p>Located under <code>RealOututs/Vision/Summary/</code></p> <p>This is where a full summary of poses is found. It compiles poses viewed from each io for a quick overview, this is helpful to ensure that poses are being rejected when they should be.</p>"}]}